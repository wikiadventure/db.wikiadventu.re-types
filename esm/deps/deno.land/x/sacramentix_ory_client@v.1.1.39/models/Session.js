/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* A Session
*/
class Session {
    static getAttributeTypeMap() {
        return Session.attributeTypeMap;
    }
    constructor() {
        /**
        * Active state. If false the session is no longer active.
        */
        Object.defineProperty(this, 'active', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
        */
        Object.defineProperty(this, 'authenticated_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * A list of authenticators which were used to authenticate the session.
        */
        Object.defineProperty(this, 'authentication_methods', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'authenticator_assurance_level', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Devices has history of all endpoints where the session was used
        */
        Object.defineProperty(this, 'devices', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The Session Expiry  When this session expires at.
        */
        Object.defineProperty(this, 'expires_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Session ID
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'identity', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The Session Issuance Timestamp  When this session was issued at. Usually equal or close to `authenticated_at`.
        */
        Object.defineProperty(this, 'issued_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
Object.defineProperty(Session, "discriminator", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
});
Object.defineProperty(Session, "attributeTypeMap", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "authenticated_at",
            "baseName": "authenticated_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "authentication_methods",
            "baseName": "authentication_methods",
            "type": "Array<SessionAuthenticationMethod>",
            "format": ""
        },
        {
            "name": "authenticator_assurance_level",
            "baseName": "authenticator_assurance_level",
            "type": "AuthenticatorAssuranceLevel",
            "format": ""
        },
        {
            "name": "devices",
            "baseName": "devices",
            "type": "Array<SessionDevice>",
            "format": ""
        },
        {
            "name": "expires_at",
            "baseName": "expires_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "identity",
            "baseName": "identity",
            "type": "Identity",
            "format": ""
        },
        {
            "name": "issued_at",
            "baseName": "issued_at",
            "type": "Date",
            "format": "date-time"
        }
    ]
});
export { Session };
