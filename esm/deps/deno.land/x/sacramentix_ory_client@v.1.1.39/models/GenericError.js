/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Error responses are sent when an error (e.g. unauthorized, bad request, ...) occurred.
*/
class GenericError {
    static getAttributeTypeMap() {
        return GenericError.attributeTypeMap;
    }
    constructor() {
        /**
        * The status code
        */
        Object.defineProperty(this, 'code', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Debug information  This field is often not exposed to protect against leaking sensitive information.
        */
        Object.defineProperty(this, 'debug', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Further error details
        */
        Object.defineProperty(this, 'details', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'error', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The error ID  Useful when trying to identify various errors in application logic.
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Error message  The error\'s message.
        */
        Object.defineProperty(this, 'message', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * A human-readable reason for the error
        */
        Object.defineProperty(this, 'reason', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
        */
        Object.defineProperty(this, 'request', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The status description
        */
        Object.defineProperty(this, 'status', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
Object.defineProperty(GenericError, "discriminator", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
});
Object.defineProperty(GenericError, "attributeTypeMap", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        {
            "name": "code",
            "baseName": "code",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "debug",
            "baseName": "debug",
            "type": "string",
            "format": ""
        },
        {
            "name": "details",
            "baseName": "details",
            "type": "any",
            "format": ""
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "GenericErrorContent",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string",
            "format": ""
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        }
    ]
});
export { GenericError };
