/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* OAuth2 JWT Bearer Grant Type Issuer Trust Relationship
*/
class TrustedOAuth2JwtGrantIssuer {
    static getAttributeTypeMap() {
        return TrustedOAuth2JwtGrantIssuer.attributeTypeMap;
    }
    constructor() {
        /**
        * The \"allow_any_subject\" indicates that the issuer is allowed to have any principal as the subject of the JWT.
        */
        Object.defineProperty(this, 'allow_any_subject', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The \"created_at\" indicates, when grant was created.
        */
        Object.defineProperty(this, 'created_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The \"expires_at\" indicates, when grant will expire, so we will reject assertion from \"issuer\" targeting \"subject\".
        */
        Object.defineProperty(this, 'expires_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'id', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The \"issuer\" identifies the principal that issued the JWT assertion (same as \"iss\" claim in JWT).
        */
        Object.defineProperty(this, 'issuer', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, 'public_key', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The \"scope\" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
        */
        Object.defineProperty(this, 'scope', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The \"subject\" identifies the principal that is the subject of the JWT.
        */
        Object.defineProperty(this, 'subject', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
Object.defineProperty(TrustedOAuth2JwtGrantIssuer, "discriminator", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
});
Object.defineProperty(TrustedOAuth2JwtGrantIssuer, "attributeTypeMap", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        {
            "name": "allow_any_subject",
            "baseName": "allow_any_subject",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "created_at",
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "expires_at",
            "baseName": "expires_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "issuer",
            "baseName": "issuer",
            "type": "string",
            "format": ""
        },
        {
            "name": "public_key",
            "baseName": "public_key",
            "type": "TrustedOAuth2JwtGrantJsonWebKey",
            "format": ""
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string",
            "format": ""
        }
    ]
});
export { TrustedOAuth2JwtGrantIssuer };
