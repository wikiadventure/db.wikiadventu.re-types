/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class Subscription {
    'created_at';
    /**
    * The currency of the subscription. To change this, a new subscription must be created. usd USD eur Euro
    */
    'currency';
    /**
    * The currently active interval of the subscription monthly Monthly yearly Yearly
    */
    'current_interval';
    /**
    * The currently active plan of the subscription
    */
    'current_plan';
    /**
    * The ID of the stripe customer
    */
    'customer_id';
    /**
    * The ID of the subscription
    */
    'id';
    'interval_changes_to';
    'ongoing_stripe_checkout_id';
    /**
    * Until when the subscription is payed
    */
    'payed_until';
    'plan_changes_at';
    'plan_changes_to';
    /**
    * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    */
    'status';
    'updated_at';
    static discriminator = undefined;
    static attributeTypeMap = [
        {
            "name": "created_at",
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "SubscriptionCurrencyEnum",
            "format": ""
        },
        {
            "name": "current_interval",
            "baseName": "current_interval",
            "type": "SubscriptionCurrentIntervalEnum",
            "format": ""
        },
        {
            "name": "current_plan",
            "baseName": "current_plan",
            "type": "string",
            "format": ""
        },
        {
            "name": "customer_id",
            "baseName": "customer_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "interval_changes_to",
            "baseName": "interval_changes_to",
            "type": "string",
            "format": ""
        },
        {
            "name": "ongoing_stripe_checkout_id",
            "baseName": "ongoing_stripe_checkout_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "payed_until",
            "baseName": "payed_until",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "plan_changes_at",
            "baseName": "plan_changes_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "plan_changes_to",
            "baseName": "plan_changes_to",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated_at",
            "baseName": "updated_at",
            "type": "Date",
            "format": "date-time"
        }
    ];
    static getAttributeTypeMap() {
        return Subscription.attributeTypeMap;
    }
    constructor() {
    }
}
export { Subscription };
