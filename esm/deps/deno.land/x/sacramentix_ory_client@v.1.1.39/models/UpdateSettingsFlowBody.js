/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Update Settings Flow Request Body
*/
class UpdateSettingsFlowBody {
    /**
    * CSRFToken is the anti-CSRF token
    */
    'csrf_token';
    /**
    * Method  Should be set to \"lookup\" when trying to add, update, or remove a lookup pairing.
    */
    'method';
    /**
    * Password is the updated password
    */
    'password';
    /**
    * The identity\'s traits  in: body
    */
    'traits';
    /**
    * Flow ID is the flow\'s ID.  in: query
    */
    'flow';
    /**
    * Link this provider  Either this or `unlink` must be set.  type: string in: body
    */
    'link';
    /**
    * Unlink this provider  Either this or `link` must be set.  type: string in: body
    */
    'unlink';
    /**
    * UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
    */
    'upstream_parameters';
    /**
    * ValidationTOTP must contain a valid TOTP based on the
    */
    'totp_code';
    /**
    * UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
    */
    'totp_unlink';
    /**
    * Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
    */
    'webauthn_register';
    /**
    * Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
    */
    'webauthn_register_displayname';
    /**
    * Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
    */
    'webauthn_remove';
    /**
    * If set to true will save the regenerated lookup secrets
    */
    'lookup_secret_confirm';
    /**
    * Disables this method if true.
    */
    'lookup_secret_disable';
    /**
    * If set to true will regenerate the lookup secrets
    */
    'lookup_secret_regenerate';
    /**
    * If set to true will reveal the lookup secrets
    */
    'lookup_secret_reveal';
    static discriminator = "method";
    static attributeTypeMap = [
        {
            "name": "csrf_token",
            "baseName": "csrf_token",
            "type": "string",
            "format": ""
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "traits",
            "baseName": "traits",
            "type": "any",
            "format": ""
        },
        {
            "name": "flow",
            "baseName": "flow",
            "type": "string",
            "format": ""
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "string",
            "format": ""
        },
        {
            "name": "unlink",
            "baseName": "unlink",
            "type": "string",
            "format": ""
        },
        {
            "name": "upstream_parameters",
            "baseName": "upstream_parameters",
            "type": "any",
            "format": ""
        },
        {
            "name": "totp_code",
            "baseName": "totp_code",
            "type": "string",
            "format": ""
        },
        {
            "name": "totp_unlink",
            "baseName": "totp_unlink",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "webauthn_register",
            "baseName": "webauthn_register",
            "type": "string",
            "format": ""
        },
        {
            "name": "webauthn_register_displayname",
            "baseName": "webauthn_register_displayname",
            "type": "string",
            "format": ""
        },
        {
            "name": "webauthn_remove",
            "baseName": "webauthn_remove",
            "type": "string",
            "format": ""
        },
        {
            "name": "lookup_secret_confirm",
            "baseName": "lookup_secret_confirm",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lookup_secret_disable",
            "baseName": "lookup_secret_disable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lookup_secret_regenerate",
            "baseName": "lookup_secret_regenerate",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lookup_secret_reveal",
            "baseName": "lookup_secret_reveal",
            "type": "boolean",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return UpdateSettingsFlowBody.attributeTypeMap;
    }
    constructor() {
        this.method = "UpdateSettingsFlowBody";
    }
}
export { UpdateSettingsFlowBody };
