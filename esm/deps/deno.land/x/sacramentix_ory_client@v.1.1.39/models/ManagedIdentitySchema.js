/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Together the name and identity uuid are a unique index constraint. This prevents a user from having schemas with the same name. This also allows schemas to have the same name across the system.
*/
class ManagedIdentitySchema {
    static getAttributeTypeMap() {
        return ManagedIdentitySchema.attributeTypeMap;
    }
    constructor() {
        /**
        * The gcs file name  This is a randomly generated name which is used to uniquely identify the file on the blob storage
        */
        Object.defineProperty(this, 'blob_name', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The publicly accessible url of the schema
        */
        Object.defineProperty(this, 'blob_url', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The Content Hash  Contains a hash of the schema\'s content.
        */
        Object.defineProperty(this, 'content_hash', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The Schema\'s Creation Date
        */
        Object.defineProperty(this, 'created_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The schema\'s ID.
        */
        Object.defineProperty(this, 'id', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * The schema name  This is set by the user and is for them to easily recognise their schema
        */
        Object.defineProperty(this, 'name', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
        * Last Time Schema was Updated
        */
        Object.defineProperty(this, 'updated_at', {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
}
Object.defineProperty(ManagedIdentitySchema, "discriminator", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
});
Object.defineProperty(ManagedIdentitySchema, "attributeTypeMap", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        {
            "name": "blob_name",
            "baseName": "blob_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "blob_url",
            "baseName": "blob_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "content_hash",
            "baseName": "content_hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "created_at",
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "updated_at",
            "baseName": "updated_at",
            "type": "Date",
            "format": "date-time"
        }
    ]
});
export { ManagedIdentitySchema };
